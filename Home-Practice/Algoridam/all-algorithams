#include <iostream>
#include <vector>
using namespace std;

class Algorithms {
public:
    // Utility: Print Array
    void printArray(vector<int>& arr) {
        for (int val : arr) {
            cout << val << " ";
        }
        cout << endl;
    }

    // 1. Bubble Sort
    void bubbleSort(vector<int>& arr) {
         for (int i = 0; i < arr.size(); i++)
    {
        for (int j = 0; j < arr.size() -i -1; j++)
        {
            if(arr[j] > arr[j + 1]){
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }

    }

    // 2. Insertion Sort
    void insertionSort(vector<int>& arr) {
    
    for (int i = 0; i < arr.size(); i++)
    {
        int key = arr[i];
        int j = i -1;
        while (j >= 0 && arr[j] > key){
            arr[j + 1] = arr[j];
            j--;
        }
        arr[j + 1] = key;
    }
    }

    // 3. Selection Sort
    void selectionSort(vector<int>& arr) {
        for(int i = 0; i < arr.size() - 1; i++){
        for(int j = i+1; j < arr.size() ; j++){
            int minIdx = i;
            if(arr[j] > arr[minIdx]){
                minIdx = j; 
            }

            int temp = arr[minIdx];
            arr[minIdx] = arr[j];
            arr[j] = temp;
        }
    }
    }

    // 4. Merge Sort
   
void margeSort(vector<int>& arr, int start, int end){
    if (start >= end)
    {
        return ;
    }
    
    int mid = (start + end) / 2;

    margeSort(arr, start, mid);
    margeSort(arr, mid +1, end);
    marge(arr, start, mid, end);

}

void marge(vector<int> & arr, int start, int mid, int end){

    int left = start;
    int right = mid+1;
    vector<int> temp;

    while (left <= mid && right <= end)
    {
        if (arr[left] < arr[right])
        {
            temp.push_back(arr[left]);
            left++;
        } else{
            temp.push_back(arr[right]);
            right++;
        }
        
    }
    
    while (left <= mid)
    {
        temp.push_back(arr[left]);
        left++;
    }

    while (right <= end)
    {
        temp.push_back(arr[right]);
        right++;
    }

    for (int i = start; i <= end; i++)
    {
        arr[i] = temp[i - start];
    }
    
}

    // 5. Quick Sort
    void quickSort(vector<int>& arr, int low, int high) {
    if (low >= high) {
        return;
    }

    int idx = partition(arr, low, high);

    // For the left side array 
    quickSort(arr, low, idx - 1);
    
    // For the right side array 
    quickSort(arr, idx + 1, high);
}

int partition(vector<int>& arr, int low, int high) {
    int pivot = arr[low];
    int count = 0;

    for (int i = low + 1; i <= high; i++) {
        if(arr[i] < pivot) {
            count++;
        }
    }

    int pivotIdx = low + count;

    int temp = arr[pivotIdx];
    arr[pivotIdx] = arr[low];
    arr[low] = temp;

    int left = low, right = high;

    while (left < pivotIdx && right > pivotIdx) {
        while (arr[left] < arr[pivotIdx]) {
            left++;
        }

        while (arr[right] > arr[pivotIdx]) {
            right--;
        }
        
        if (left < pivotIdx && right > pivotIdx) {
            int temp = arr[left];
            arr[left] = arr[right];
            arr[right] = temp;

            left++;
            right--;
        }
    }
    
    return pivotIdx;
}

    // 6. Linear Search
    int linearSearch(vector<int>& arr, int key) {
        for (int i = 0; i < arr.size(); i++) {
            if (arr[i] == key) return i;
        }
        return -1;
    }

    // 7. Binary Search (Recursive)
    int binarySearch(vector<int>& arr, int low, int high, int key) {
        if (low > high) return -1;
        int mid = (low + high) / 2;
        if (arr[mid] == key) return mid;
        else if (arr[mid] > key) return binarySearch(arr, low, mid - 1, key);
        else return binarySearch(arr, mid + 1, high, key);
    }
};

int main() {
    Algorithms algo;
    int size;
    cout << "Enter size of array: ";
    cin >> size;

    vector<int> arr(size, 0);
    for (int i = 0; i < size; i++) {
        cout << "Enter element: ";
        cin >> arr[i];
    }

    int choice;
    do {
        cout << "\n------ MENU ------\n";
        cout << "1. Bubble Sort\n";
        cout << "2. Insertion Sort\n";
        cout << "3. Selection Sort\n";
        cout << "4. Merge Sort\n";
        cout << "5. Quick Sort\n";
        cout << "6. Linear Search\n";
        cout << "7. Binary Search\n";
        cout << "0. Exit\n";
        cout << "Enter choice: ";
        cin >> choice;

        // vector<int> temp = arr;

        switch (choice) {
        case 1:
            algo.bubbleSort(arr);
            algo.printArray(arr);
            break;
        case 2:
            algo.insertionSort(arr);
            algo.printArray(arr);
            break;
        case 3:
            algo.selectionSort(arr);
            algo.printArray(arr);
            break;
        case 4:
            algo.margeSort(arr, 0, size - 1);
            algo.printArray(arr);
            break;
        case 5:
            algo.quickSort(arr, 0, size - 1);
            algo.printArray(arr);
            break;
        case 6: {
            int key;
            cout << "Enter element to search: ";
            cin >> key;
            int idx = algo.linearSearch(arr, key);
            if (idx == -1) cout << "Element not found.\n";
            else cout << "Element found at index " << idx << endl;
            break;
        }
        case 7: {
            algo.bubbleSort(arr);
            int key;
            cout << "Enter element to search: ";
            cin >> key;
            int idx = algo.binarySearch(arr, 0, size - 1, key);
            if (idx == -1) cout << "Element not found.\n";
            else cout << "Element found at index " << idx << endl;
            break;
        }
        case 0:
            cout << "Exiting...\n";
            break;
        default:
            cout << "Invalid choice!\n";
        }
    } while (choice != 0);

    return 0;
}
